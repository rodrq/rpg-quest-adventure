"""init

Revision ID: ad22c2c8b2e1
Revises:
Create Date: 2024-03-14 17:24:59.817578

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "ad22c2c8b2e1"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.LargeBinary(), nullable=False),
        sa.Column("is_admin", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("selected_character", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("users_pkey")),
    )
    op.create_table(
        "characters",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column(
            "class_",
            sa.Enum(
                "warrior",
                "mage",
                "barbarian",
                "cleric",
                "warlock",
                "druid",
                "paladin",
                "rogue",
                "knight",
                "archer",
                name="characterclassenum",
            ),
            nullable=False,
        ),
        sa.Column(
            "virtue",
            sa.Enum(
                "courage",
                "honor",
                "compassion",
                "wisdom",
                "resilience",
                "generosity",
                "determination",
                "humility",
                name="charactervirtueenum",
            ),
            nullable=False,
        ),
        sa.Column(
            "flaw",
            sa.Enum(
                "cowardice",
                "greed",
                "dishonesty",
                "cruelty",
                "ignorance",
                "selfishness",
                "impulsiveness",
                "arrogance",
                name="characterflawenum",
            ),
            nullable=False,
        ),
        sa.Column(
            "state", sa.Enum("dead", "winner", "adventuring", name="characterstateenum"), nullable=True
        ),
        sa.Column("valor_points", sa.Integer(), nullable=True),
        sa.Column("map_level", sa.Integer(), nullable=True),
        sa.Column("times_reset", sa.Integer(), nullable=True),
        sa.Column("completed_last_quest", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("characters_user_id_fkey")),
        sa.PrimaryKeyConstraint("name", name=op.f("characters_pkey")),
        sa.UniqueConstraint("name", name=op.f("characters_name_key")),
    )
    op.create_table(
        "quests",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("character_name", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("approaches", sa.JSON(), nullable=True),
        sa.Column("selected_approach", sa.Integer(), nullable=True),
        sa.Column("survived", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_name"],
            ["characters.name"],
            name=op.f("quests_character_name_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("quests_pkey")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
